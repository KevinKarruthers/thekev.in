version: 2.1

orbs:
  linter: thekevjames/linter@0.1

  web:
    jobs:
      app:
        docker:
          - image: mysocialobservations/docker-tdewolff-minify:latest
        parameters:
          dir:
            type: string
        steps:
          - run:
              name: install dependencies
              command: apk add --update ca-certificates openssl
          - checkout
          - run: mkdir -p artifacts/<<parameters.dir>>
          - run: cp shared/* artifacts/<<parameters.dir>>/
          - run: cp <<parameters.dir>>/* artifacts/<<parameters.dir>>/
          - run: minify --recursive --output artifacts/ artifacts/
          - persist_to_workspace:
              root: artifacts
              paths:
                - <<parameters.dir>>/

jobs:
  # TODO: configure in terraform
  functions:
    docker:
      - image: google/cloud-sdk:latest
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /gcloud-service-key.json
    steps:
      - run:
          name: authenticate with google cloud
          command: |
            echo "${GCLOUD_SERVICE_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud config set project "thekevjames-175823"
      - checkout
      - run:
          name: grab env vars
          command: |
            cd functions/
            echo "API_TOKEN: ${API_TOKEN}" >> .env.yaml
            echo "SUCKS_DEVICE_ID: ${SUCKS_DEVICE_ID}" >> .env.yaml
            echo "SUCKS_EMAIL: ${SUCKS_EMAIL}" >> .env.yaml
            echo "SUCKS_PASSWORD_HASH: ${SUCKS_PASSWORD_HASH}" >> .env.yaml
      - run:
          name: gcloud functions deploy tucker_run
          command: |
            cd functions/
            gcloud functions deploy tucker_run \
              --memory=128MB \
              --runtime python37 \
              --trigger-http \
              --env-vars-file .env.yaml
      - run:
          name: gcloud functions deploy tucker_stop
          command: |
            cd functions/
            gcloud functions deploy tucker_stop \
              --memory=128MB \
              --runtime python37 \
              --trigger-http \
              --env-vars-file .env.yaml

  octodash:
    docker:
      - image: node:10.16.3-alpine
    steps:
      - run:
          name: install dependencies
          command: apk add --update ca-certificates openssl
      - checkout
      - run: cd octodash && npm install --production
      - run: cd octodash && npm run build
      - run: mkdir -p artifacts
      - run: mv octodash/build artifacts/octodash
      - persist_to_workspace:
          root: artifacts
          paths:
            - octodash/

  octodash-extension:
    docker:
      - image: node:10.16.3
    environment:
      OCTODASH_APP_ID: gpdoaoigpdmgpfebclknegmdkaamcdpf
    steps:
      - run:
          name: install dependencies
          command: |
            apt-get update
            apt-get install -y jq zip
            npm install -g chrome-web-store-item-property-cli
      - checkout
      - attach_workspace:
          at: artifacts
      - run:
          name: increment build version
          command: |
            CURR="$(chrome-web-store-item-property "${OCTODASH_APP_ID}" | jq '.version' | tr -d '"')"
            TARG="$(jq '.version' octodash/public/manifest.json | tr -d '"')"
            [[ "${CURR}" == "${TARG}"* ]] && TARG+="."$(($(echo "${CURR}" | sed 's/.*\.//')+1)) || TARG+=".0"
            jq ".version = \"${TARG}\"" octodash/public/manifest.json > artifacts/octodash/manifest.json
            cat artifacts/octodash/manifest.json
      - run: mkdir -p extensions
      - run: zip -r extensions/octodash.zip artifacts/octodash/*
      - persist_to_workspace:
          root: extensions
          paths:
            - octodash.zip

  octodash-publish:
    docker:
      - image: cibuilds/chrome-extension:latest
    environment:
      OCTODASH_APP_ID: gpdoaoigpdmgpfebclknegmdkaamcdpf
    steps:
      - attach_workspace:
          at: extensions
      - run: APP_ID=${OCTODASH_APP_ID} publish extensions/octodash.zip

  quotes-json:
    docker:
      - image: mysocialobservations/docker-tdewolff-minify:latest
    steps:
      - run:
          name: install dependencies
          command: apk add --update ca-certificates curl jq openssl
      - checkout
      - run: mkdir -p artifacts/quotes
      - run:
          name: get quotes
          command: |
            curl -X POST https://content.dropboxapi.com/2/files/download \
                -H "Authorization: Bearer ${DROPBOX_TOKEN}" \
                -H "Dropbox-API-Arg: {\"path\": \"/vimwiki/quotes.wiki\"}" \
                -o /quotes.wiki
            jq -n --arg x "$(cat /quotes.wiki)" '$x | split("\n")' > artifacts/quotes/quotes.json
      - run: minify --recursive --output artifacts/ artifacts/
      - persist_to_workspace:
          root: artifacts
          paths:
            - quotes/

  site:
    docker:
      - image: python:3.7.5
    steps:
      - checkout
      - run: python3 -m pip install -r site/requirements.txt
      - run: cp shared/* site/static/
      - run: python3 site/build.py
      - run: pygmentize -S emacs -f html -a .codehilite > site/build/emacs.css
      - persist_to_workspace:
          root: site
          paths:
            - build/

  site-minify:
    docker:
      - image: mysocialobservations/docker-tdewolff-minify:latest
    steps:
      - run:
          name: install dependencies
          command: apk add --update ca-certificates openssl
      - attach_workspace:
          at: site
      - run: minify --recursive --html-keep-document-tags --output site/build/ site/build/
      - persist_to_workspace:
          root: site
          paths:
            - build/

  www-redir:
    docker:
      - image: mysocialobservations/docker-tdewolff-minify
    steps:
      - run:
          name: install dependencies
          command: apk add --update ca-certificates openssl
      - checkout
      - run: mkdir -p www/redir
      - run: cp www-redir/* www/redir/
      - run: minify --recursive --html-keep-document-tags --output www/redir/ www/redir/
      - persist_to_workspace:
          root: www
          paths:
            - redir/

  upload:
    docker:
      - image: google/cloud-sdk:latest
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /gcloud-service-key.json
    steps:
      - run:
          name: authenticate with google cloud
          command: |
            echo "${GCLOUD_SERVICE_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud config set project "thekevjames-175823"
      - attach_workspace:
          at: artifacts
      - run: gsutil -m cp -r artifacts/* gs://thekevjames-artifacts
      - attach_workspace:
          at: site
      - run: gsutil -m cp -r site/build/* gs://thekev.in || true
      - attach_workspace:
          at: www
      - run: gsutil -m cp -r www/redir/* gs://www.thekev.in || true

workflows:
  run-jobs:
    jobs:
      - linter/pre-commit:
          python_version: 3.7.4

      - functions:
          requires:
            - linter/pre-commit
          filters:
            branches:
              only: master

      - web/app:
          name: hexclock
          dir: hexclock
          requires:
            - linter/pre-commit
      - web/app:
          name: quotes
          dir: quotes
          requires:
            - linter/pre-commit
      - quotes-json:
          requires:
            - linter/pre-commit
      - web/app:
          name: webcycle
          dir: webcycle
          requires:
            - linter/pre-commit
      - site:
          requires:
            - linter/pre-commit
      - site-minify:
          requires:
            - site
      - www-redir:
          requires:
            - linter/pre-commit
      - upload:
          requires:
            - hexclock
            - octodash
            - quotes
            - quotes-json
            - site-minify
            - webcycle
            - www-redir
          filters:
            branches:
              only: master

      - octodash:
          requires:
            - linter/pre-commit
      - octodash-extension:
          requires:
            - octodash
      - octodash-publish:
          requires:
            - octodash-extension
          filters:
            branches:
              only: master

  nightly-quotes:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only: master
    jobs:
      - quotes-json
      - upload:
          requires:
            - quotes-json
